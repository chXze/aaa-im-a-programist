using System;

abstract class Gladiator
{
    protected string name;
    protected int health;
    protected int damage;

    public Gladiator(string name, int health, int damage)
    {
        this.name = name;
        this.health = health;
        this.damage = damage;
    }

    public abstract void Attack(Gladiator opponent);

    public void TakeDamage(int damage)
    {
        health -= damage;
        Console.WriteLine($"{name} получил {damage} урона. Осталось здоровья: {health}");
        if (health <= 0)
        {
            Console.WriteLine($"{name} был повержен!");
        }
    }

    public bool IsAlive()
    {
        return health > 0;
    }
}

class Swordsman : Gladiator
{
    public Swordsman(string name) : base(name, 100, 10) { }

    public override void Attack(Gladiator opponent)
    {
        Console.WriteLine($"{name} атакует {opponent.name}!");
        opponent.TakeDamage(damage);
    }
}

class Archer : Gladiator
{
    public Archer(string name) : base(name, 80, 15) { }

    public override void Attack(Gladiator opponent)
    {
        Console.WriteLine($"{name} выстрелил в {opponent.name}!");
        opponent.TakeDamage(damage);
    }
}

class Program
{
    static void Main(string[] args)
    {
        Swordsman swordsman = new Swordsman("Максимус");
        Archer archer = new Archer("Леголас");

        while (swordsman.IsAlive() && archer.IsAlive())
        {
            swordsman.Attack(archer);
            archer.Attack(swordsman);
        }

        if (swordsman.IsAlive())
        {
            Console.WriteLine($"{swordsman.name} одержал победу!");
        }
        else
        {
            Console.WriteLine($"{archer.name} одержал победу!");
        }
    }
}
