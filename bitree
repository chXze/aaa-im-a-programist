using System;

namespace BinaryTree
{
    public class Node
    {
        private Node _leftBranch;
        private Node _rightBranch;

        public Node(int id, int number)
        {
            _leftBranch = null;
            _rightBranch = null;

            Id = id;
            Number = number;
        }

        public int Id { get; private set; }
        public int Number { get; private set; }

        public void Add(int number)
        {
            if (number < Number)
            {
                if (_leftBranch == null)
                    _leftBranch = new Node(Id + 1, number);
                else
                    _leftBranch.Add(number);
            }
            else
            {
                if (_rightBranch == null)
                    _rightBranch = new Node(Id + 1, number);
                else
                    _rightBranch.Add(number);
            }
        }

        public void PrintValues()
        {
            _leftBranch?.PrintValues();
            Console.WriteLine($"{Id}) - {Number}");
            _rightBranch?.PrintValues();
        }

        public bool Find(int number)
        {
            if (number == Number)
                return true;

            if (number < Number)
                return _leftBranch?.Find(number) ?? false;

            return _rightBranch?.Find(number) ?? false;
        }

        public Node Remove(int number, Node parent = null)
        {
            if (number < Number)
            {
                if (_leftBranch != null)
                    _leftBranch = _leftBranch.Remove(number, this);
            }
            else if (number > Number)
            {
                if (_rightBranch != null)
                    _rightBranch = _rightBranch.Remove(number, this);
            }
            else
            {
                if (_leftBranch != null && _rightBranch != null)
                {
                    Number = _rightBranch.GetMinValue();
                    _rightBranch = _rightBranch.Remove(Number, this);
                }
                else
                {
                    return _leftBranch ?? _rightBranch;
                }
            }

            return this;
        }

        private int GetMinValue()
        {
            return _leftBranch?.GetMinValue() ?? Number;
        }
    }

    public class BinaryTree
    {
        private Node _root;

        public void Add(int number)
        {
            if (_root == null)
                _root = new Node(1, number);
            else
                _root.Add(number);
        }

        public void PrintValues()
        {
            if (_root == null)
            {
                Console.WriteLine("Tree is empty.");
                return;
            }

            _root.PrintValues();
        }

        public bool Find(int number)
        {
            return _root?.Find(number) ?? false;
        }

        public void Remove(int number)
        {
            if (_root != null)
                _root = _root.Remove(number);
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var tree = new BinaryTree();

            // Добавление значений
            tree.Add(50);
            tree.Add(30);
            tree.Add(70);
            tree.Add(20);
            tree.Add(40);
            tree.Add(60);
            tree.Add(80);

            Console.WriteLine("Tree values in order:");
            tree.PrintValues();

            // Поиск значений
            Console.WriteLine("Find 40: " + tree.Find(40));
            Console.WriteLine("Find 90: " + tree.Find(90));

            // Удаление узлов
            Console.WriteLine("Removing 70...");
            tree.Remove(70);
            tree.PrintValues();
        }
    }
}
